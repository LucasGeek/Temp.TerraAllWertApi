#!/bin/bash

# =============================================================================
# Terra Allwert API - Script de Deploy em Produ√ß√£o
# =============================================================================
# Este script realiza o deploy da API Terra Allwert em ambiente de produ√ß√£o
# usando Docker Swarm com as configura√ß√µes do arquivo .env.prd
# =============================================================================

set -e  # Sair em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Diret√≥rio base do projeto
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
ENV_FILE="$PROJECT_DIR/.env.prd"

echo -e "${BLUE}üöÄ Terra Allwert - Deploy de Produ√ß√£o${NC}"
echo -e "${BLUE}=====================================${NC}"

# Verificar se o arquivo .env.prd existe
if [ ! -f "$ENV_FILE" ]; then
    echo -e "${RED}‚ùå Erro: Arquivo .env.prd n√£o encontrado!${NC}"
    echo -e "${YELLOW}üí° Instru√ß√µes:${NC}"
    echo "1. Copie o arquivo .env.prd.example para .env.prd"
    echo "2. Configure todas as vari√°veis de ambiente"
    echo "3. Execute este script novamente"
    exit 1
fi

# Carregar vari√°veis do .env.prd
echo -e "${BLUE}üìã Carregando configura√ß√µes de produ√ß√£o...${NC}"
export $(grep -v '^#' "$ENV_FILE" | xargs)

# Verificar se as vari√°veis obrigat√≥rias est√£o definidas
required_vars=(
    "TERRA_ALLWERT_PRD_DB_USER"
    "TERRA_ALLWERT_PRD_DB_PASSWORD" 
    "TERRA_ALLWERT_PRD_DB_NAME"
    "TERRA_ALLWERT_PRD_MINIO_ACCESS_KEY"
    "TERRA_ALLWERT_PRD_MINIO_SECRET_KEY"
    "TERRA_ALLWERT_PRD_REDIS_PASSWORD"
    "TERRA_ALLWERT_PRD_JWT_SECRET"
)

echo -e "${BLUE}üîç Verificando vari√°veis obrigat√≥rias...${NC}"
for var in "${required_vars[@]}"; do
    if [ -z "${!var}" ]; then
        echo -e "${RED}‚ùå Erro: Vari√°vel $var n√£o est√° definida no .env.prd${NC}"
        exit 1
    fi
done

echo -e "${GREEN}‚úÖ Todas as vari√°veis obrigat√≥rias est√£o configuradas${NC}"

# Verificar se o Docker Swarm est√° inicializado
if ! docker info --format '{{.Swarm.LocalNodeState}}' | grep -q active; then
    echo -e "${YELLOW}‚ö†Ô∏è  Docker Swarm n√£o est√° ativo. Inicializando...${NC}"
    docker swarm init
fi

# Verificar se a rede TerraAllWertNet existe
if ! docker network ls --format '{{.Name}}' | grep -q "^TerraAllWertNet$"; then
    echo -e "${BLUE}üåê Criando rede TerraAllWertNet...${NC}"
    docker network create -d overlay --attachable TerraAllWertNet
fi

# Build da imagem da API
echo -e "${BLUE}üèóÔ∏è  Construindo imagem da API...${NC}"
cd "$PROJECT_DIR"
docker build -f docker/Dockerfile -t terra-allwert-api:prd .

# Deploy do stack
echo -e "${BLUE}üö¢ Realizando deploy do stack...${NC}"
docker stack deploy \
    --compose-file docker/docker-compose.swarm.prd.yml \
    --env-file "$ENV_FILE" \
    terra-allwert-prd

echo -e "${GREEN}‚úÖ Deploy realizado com sucesso!${NC}"

# Aguardar servi√ßos ficarem prontos
echo -e "${BLUE}‚è≥ Aguardando servi√ßos ficarem prontos...${NC}"
sleep 30

# Verificar status dos servi√ßos
echo -e "${BLUE}üìä Status dos servi√ßos:${NC}"
docker service ls --filter name=terra-allwert-prd

# Logs dos servi√ßos
echo -e "${BLUE}üìã Logs recentes da API:${NC}"
docker service logs --tail 20 terra-allwert-prd_prd-api

echo ""
echo -e "${GREEN}üéâ Deploy de produ√ß√£o conclu√≠do!${NC}"
echo -e "${BLUE}üì° Servi√ßos dispon√≠veis:${NC}"
echo "   ‚Ä¢ API: http://app.terra-allwert.online"
echo "   ‚Ä¢ MinIO Console: http://app.terra-allwert.online/minio-console"
echo ""
echo -e "${YELLOW}üìã Comandos √∫teis:${NC}"
echo "   ‚Ä¢ Ver servi√ßos: docker service ls"
echo "   ‚Ä¢ Ver logs: docker service logs -f terra-allwert-prd_prd-api"
echo "   ‚Ä¢ Escalar servi√ßos: docker service scale terra-allwert-prd_prd-api=3"
echo "   ‚Ä¢ Parar stack: docker stack rm terra-allwert-prd"
echo ""
echo -e "${BLUE}üîí Lembre-se de configurar:${NC}"
echo "   ‚Ä¢ SSL/TLS com certificados v√°lidos"
echo "   ‚Ä¢ Firewall e regras de seguran√ßa"
echo "   ‚Ä¢ Monitoramento e alertas"
echo "   ‚Ä¢ Backups autom√°ticos"