stages:
  - test
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  GO_VERSION: "1.22"

# Test stage
test:
  stage: test
  image: golang:${GO_VERSION}
  services:
    - postgres:16-alpine
    - redis:7-alpine
  variables:
    POSTGRES_DB: terraallwert_test
    POSTGRES_USER: testuser
    POSTGRES_PASSWORD: testpass
    DB_HOST: postgres
    DB_PORT: 5432
    DB_USER: testuser
    DB_PASSWORD: testpass
    DB_NAME: terraallwert_test
    REDIS_HOST: redis
    REDIS_PORT: 6379
  before_script:
    - cd src && go mod download
    - cd ../test && go mod download
  script:
    - make test-coverage
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: test/coverage.xml
    paths:
      - test/coverage.html
    expire_in: 1 week
  coverage: '/coverage: \d+\.\d+% of statements/'

# Lint stage
lint:
  stage: test
  image: golangci/golangci-lint:latest
  script:
    - make lint
  allow_failure: false

# Build Docker image
build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -f docker/Dockerfile -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker build -f docker/Dockerfile -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main
    - develop

# Deploy to staging
deploy_staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$STAGING_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $STAGING_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh $STAGING_USER@$STAGING_HOST "cd $STAGING_PATH && docker-compose pull && docker-compose up -d"
  environment:
    name: staging
    url: https://staging.terraallwert.com
  only:
    - develop
  when: manual

# Deploy to production
deploy_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$PRODUCTION_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $PRODUCTION_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh $PRODUCTION_USER@$PRODUCTION_HOST "cd $PRODUCTION_PATH && docker-compose pull && docker-compose up -d"
  environment:
    name: production
    url: https://api.terraallwert.com
  only:
    - main
  when: manual