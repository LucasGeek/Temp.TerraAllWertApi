# Custom Scalars
scalar Time
scalar JSON
scalar Upload

type Query {
  # Authentication (Autenticação) - PÚBLICO
  me: User                                             # dados do usuário logado
  
  # Torres
  towers: [Tower!]!
  tower(id: ID!): Tower
  
  # Pavimentos
  floors(towerId: ID): [Floor!]!
  floor(id: ID!): Floor
  
  # Apartamentos
  apartments(floorId: ID): [Apartment!]!               # lista apartamentos de um pavimento
  apartment(id: ID!): Apartment                        # busca apartamento por ID
  searchApartments(input: ApartmentSearchInput!): [Apartment!]! # busca apartamentos com filtros
  
  # Gallery (Galeria)
  galleryImages(route: String): [GalleryImage!]!       # lista imagens por rota
  galleryImage(id: ID!): GalleryImage                  # busca imagem por ID
  galleryRoutes: [String!]!                            # lista todas as rotas disponíveis
  
  # Image Pins (Marcadores)
  imagePins(galleryImageId: ID!): [ImagePin!]!         # lista pins de uma imagem
  imagePin(id: ID!): ImagePin                          # busca pin por ID
  
  # Configuration (Configurações)
  appConfig: AppConfig!                                # configurações da aplicação
  
  # File Management (Gestão de Arquivos)
  generateSignedUploadUrl(fileName: String!, contentType: String!, folder: String!): SignedUploadUrl! # gera URL assinada para upload
  generateBulkDownload(towerId: ID): BulkDownload!     # gera download em lote
  
  # User Management (ADMIN APENAS)
  users: [User!]!                                      # lista todos os usuários
  user(id: ID!): User                                  # busca usuário por ID
}

type Mutation {
  # Authentication (Autenticação) - PÚBLICO
  login(input: LoginInput!): LoginResponse!            # fazer login
  refreshToken(refreshToken: String!): LoginResponse! # renovar token
  logout: Boolean!                                     # fazer logout
  
  # User Management (ADMIN APENAS)
  createUser(input: CreateUserInput!): User!          # criar novo usuário
  updateUser(input: UpdateUserInput!): User!          # atualizar usuário
  deleteUser(id: ID!): Boolean!                       # deletar usuário
  changePassword(input: ChangePasswordInput!): Boolean! # alterar senha
  
  # Towers (Torres)
  createTower(input: CreateTowerInput!): Tower!        # criar nova torre
  updateTower(input: UpdateTowerInput!): Tower!        # atualizar torre
  deleteTower(id: ID!): Boolean!                       # deletar torre
  
  # Floors (Pavimentos)
  createFloor(input: CreateFloorInput!): Floor!        # criar novo pavimento
  updateFloor(input: UpdateFloorInput!): Floor!        # atualizar pavimento
  deleteFloor(id: ID!): Boolean!                       # deletar pavimento
  
  # Apartments (Apartamentos)
  createApartment(input: CreateApartmentInput!): Apartment!         # criar novo apartamento
  updateApartment(input: UpdateApartmentInput!): Apartment!         # atualizar apartamento
  deleteApartment(id: ID!): Boolean!                               # deletar apartamento
  addApartmentImage(apartmentId: ID!, imageUrl: String!, description: String): ApartmentImage! # adicionar imagem ao apartamento
  removeApartmentImage(imageId: ID!): Boolean!                     # remover imagem do apartamento
  reorderApartmentImages(apartmentId: ID!, imageIds: [ID!]!): [ApartmentImage!]! # reordenar imagens do apartamento
  
  # Gallery (Galeria)
  createGalleryImage(input: CreateGalleryImageInput!): GalleryImage!       # criar nova imagem na galeria
  updateGalleryImage(input: UpdateGalleryImageInput!): GalleryImage!       # atualizar imagem da galeria
  deleteGalleryImage(id: ID!): Boolean!                                    # deletar imagem da galeria
  reorderGalleryImages(route: String!, imageIds: [ID!]!): [GalleryImage!]! # reordenar imagens da galeria
  
  # Image Pins (Marcadores)
  createImagePin(input: CreateImagePinInput!): ImagePin!                   # criar novo marcador
  updateImagePin(input: UpdateImagePinInput!): ImagePin!                   # atualizar marcador
  deleteImagePin(id: ID!): Boolean!                                        # deletar marcador
  
  # Configuration (Configurações)
  updateAppConfig(logoUrl: String, apiBaseUrl: String, cacheControlMaxAge: Int): AppConfig! # atualizar configurações
}

# Building/Tower (Torre)
type Tower {
  id: ID!
  name: String!              # nome da torre
  description: String        # descrição da torre
  floors: [Floor!]!          # lista de pavimentos
  totalApartments: Int!      # total de apartamentos
  createdAt: Time!           # data de criação
  updatedAt: Time!           # última atualização
}

# Floor (Pavimento)
type Floor {
  id: ID!
  number: String!            # número do pavimento (ex: "1", "Térreo", "Cobertura")
  tower: Tower!              # torre a qual pertence
  towerId: ID!
  bannerUrl: String          # URL de banner opcional
  bannerMetadata: FileMetadata
  apartments: [Apartment!]!  # lista de apartamentos
  totalApartments: Int!      # total de apartamentos nesse pavimento
  createdAt: Time!
  updatedAt: Time!
}

# Apartment (Apartamento)
type Apartment {
  id: ID!
  number: String!            # número do apartamento
  area: String               # área do apartamento
  suites: Int                # quantidade de suítes
  bedrooms: Int              # quantidade de dormitórios
  parkingSpots: Int          # quantidade de vagas de garagem
  status: ApartmentStatus!   # status atual
  floor: Floor!              # pavimento
  floorId: ID!
  mainImageUrl: String       # imagem principal
  floorPlanUrl: String       # planta baixa
  solarPosition: String      # posição solar
  price: Float               # preço
  available: Boolean!        # disponível para venda?
  mainImageMetadata: FileMetadata
  floorPlanMetadata: FileMetadata
  images: [ApartmentImage!]! # galeria de imagens do apartamento
  createdAt: Time!
  updatedAt: Time!
}

# Apartment Status (Status do Apartamento)
enum ApartmentStatus {
  AVAILABLE     # disponível
  RESERVED      # reservado
  SOLD          # vendido
  MAINTENANCE   # em manutenção
}

# Apartment Image (Imagem do Apartamento)
type ApartmentImage {
  id: ID!
  apartment: Apartment!
  apartmentId: ID!
  imageUrl: String!          # URL da imagem
  imageMetadata: FileMetadata!
  description: String        # descrição opcional
  order: Int!                # ordem de exibição
  createdAt: Time!
}

# Gallery Image (Imagem de Galeria)
type GalleryImage {
  id: ID!
  route: String!             # rota/slug de navegação
  imageUrl: String!
  thumbnailUrl: String
  imageMetadata: FileMetadata!
  thumbnailMetadata: FileMetadata
  title: String
  description: String
  displayOrder: Int!         # ordem de exibição
  pins: [ImagePin!]!         # marcadores interativos
  createdAt: Time!
  updatedAt: Time!
}

# Interactive Pins (Marcadores Interativos)
type ImagePin {
  id: ID!
  galleryImage: GalleryImage!
  galleryImageId: ID!
  xCoord: Float!             # coordenada X
  yCoord: Float!             # coordenada Y
  title: String
  description: String
  apartment: Apartment       # ligação com apartamento
  apartmentId: ID
  linkUrl: String
  createdAt: Time!
}

# File Metadata (Metadados de Arquivo)
type FileMetadata {
  fileName: String!
  fileSize: Int!
  contentType: String!
  uploadedAt: Time!
  checksum: String
  width: Int
  height: Int
}

# Application Config (Configurações da Aplicação)
type AppConfig {
  logoUrl: String
  apiBaseUrl: String!
  minioBaseUrl: String!
  appVersion: String!
  cacheControlMaxAge: Int!
  updatedAt: Time!
}

# Signed Upload URL (URL assinada para upload direto)
type SignedUploadUrl {
  uploadUrl: String!
  accessUrl: String!
  expiresIn: Int!
  fields: JSON
}

# Bulk Download Info (Informações de Download em Lote)
type BulkDownload {
  downloadUrl: String!
  fileName: String!
  fileSize: Int!
  expiresIn: Int!
  createdAt: Time!
}

# Tower Input
input CreateTowerInput {
  name: String!              # nome da torre
  description: String        # descrição da torre
}

input UpdateTowerInput {
  id: ID!
  name: String               # nome da torre
  description: String        # descrição da torre
}

# Floor Input
input CreateFloorInput {
  number: String!            # número do pavimento
  towerId: ID!               # ID da torre
}

input UpdateFloorInput {
  id: ID!
  number: String             # número do pavimento
}

# Apartment Input
input CreateApartmentInput {
  number: String!            # número do apartamento
  floorId: ID!               # ID do pavimento
  area: String               # área do apartamento
  suites: Int                # quantidade de suítes
  bedrooms: Int              # quantidade de dormitórios
  parkingSpots: Int          # quantidade de vagas
  status: ApartmentStatus    # status do apartamento
  solarPosition: String      # posição solar
  price: Float               # preço
  available: Boolean         # disponível?
}

input UpdateApartmentInput {
  id: ID!
  number: String
  area: String
  suites: Int
  bedrooms: Int
  parkingSpots: Int
  status: ApartmentStatus
  solarPosition: String
  price: Float
  available: Boolean
}

# Apartment Search Input
input ApartmentSearchInput {
  number: String
  suites: Int
  bedrooms: Int
  parkingSpots: Int
  solarPosition: String
  towerId: ID
  floorId: ID
  priceMin: Float
  priceMax: Float
  areaMin: String
  areaMax: String
  status: ApartmentStatus
  available: Boolean
  limit: Int
  offset: Int
}

# Gallery Input
input CreateGalleryImageInput {
  route: String!
  title: String
  description: String
  displayOrder: Int
}

input UpdateGalleryImageInput {
  id: ID!
  title: String
  description: String
  displayOrder: Int
}

# Image Pin Input
input CreateImagePinInput {
  galleryImageId: ID!
  xCoord: Float!
  yCoord: Float!
  title: String
  description: String
  apartmentId: ID
  linkUrl: String
}

input UpdateImagePinInput {
  id: ID!
  xCoord: Float
  yCoord: Float
  title: String
  description: String
  apartmentId: ID
  linkUrl: String
}

# User Management (Gestão de Usuários)
type User {
  id: ID!
  username: String!          # nome de usuário
  email: String!             # email
  role: UserRole!            # papel/função
  active: Boolean!           # ativo?
  lastLogin: Time            # último login
  createdAt: Time!           # data de criação
  updatedAt: Time!           # última atualização
}

# User Role (Papel do Usuário)
enum UserRole {
  ADMIN                      # administrador (acesso total)
  VIEWER                     # visualizador (somente leitura)
}

# Authentication (Autenticação)
type LoginResponse {
  token: String!             # token de acesso JWT
  refreshToken: String!      # token de renovação
  expiresAt: Time!           # data de expiração do token
  user: User!                # dados do usuário
}

# Authentication Input
input LoginInput {
  email: String!             # email do usuário
  password: String!          # senha
}

# User Management Input
input CreateUserInput {
  username: String!          # nome de usuário
  email: String!             # email
  password: String!          # senha
  role: UserRole!            # papel/função
  active: Boolean            # ativo (padrão: true)
}

input UpdateUserInput {
  id: ID!
  username: String           # nome de usuário
  email: String              # email
  role: UserRole             # papel/função
  active: Boolean            # ativo
}

input ChangePasswordInput {
  userId: ID                 # ID do usuário (opcional - se não fornecido, altera própria senha)
  oldPassword: String        # senha atual (obrigatória se alterando própria senha)
  newPassword: String!       # nova senha
}