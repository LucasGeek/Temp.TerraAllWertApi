package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"api/domain/entities"
	"api/graph/generated"
	"api/graph/model"
	"context"
	"fmt"
)

// CreateTower is the resolver for the createTower field.
func (r *mutationResolver) CreateTower(ctx context.Context, input model.CreateTowerInput) (*entities.Tower, error) {
	tower := &entities.Tower{
		Name:        input.Name,
		Description: input.Description,
	}

	err := r.TowerRepo.Create(ctx, tower)
	if err != nil {
		return nil, err
	}

	return tower, nil
}

// UpdateTower is the resolver for the updateTower field.
func (r *mutationResolver) UpdateTower(ctx context.Context, input model.UpdateTowerInput) (*entities.Tower, error) {
	tower, err := r.TowerRepo.GetByID(ctx, input.ID)
	if err != nil {
		return nil, err
	}

	if input.Name != nil {
		tower.Name = *input.Name
	}
	if input.Description != nil {
		tower.Description = input.Description
	}

	err = r.TowerRepo.Update(ctx, tower)
	if err != nil {
		return nil, err
	}

	return tower, nil
}

// DeleteTower is the resolver for the deleteTower field.
func (r *mutationResolver) DeleteTower(ctx context.Context, id string) (bool, error) {
	err := r.TowerRepo.Delete(ctx, id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// CreateFloor is the resolver for the createFloor field.
func (r *mutationResolver) CreateFloor(ctx context.Context, input model.CreateFloorInput) (*entities.Floor, error) {
	panic(fmt.Errorf("not implemented: CreateFloor - createFloor"))
}

// UpdateFloor is the resolver for the updateFloor field.
func (r *mutationResolver) UpdateFloor(ctx context.Context, input model.UpdateFloorInput) (*entities.Floor, error) {
	panic(fmt.Errorf("not implemented: UpdateFloor - updateFloor"))
}

// DeleteFloor is the resolver for the deleteFloor field.
func (r *mutationResolver) DeleteFloor(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteFloor - deleteFloor"))
}

// CreateApartment is the resolver for the createApartment field.
func (r *mutationResolver) CreateApartment(ctx context.Context, input model.CreateApartmentInput) (*entities.Apartment, error) {
	apartment := &entities.Apartment{
		FloorID:   input.FloorID,
		Number:    input.Number,
		Bedrooms:  input.Bedrooms,
		Area:      input.Area,
		Price:     input.Price,
		Available: input.Available,
	}

	err := r.ApartmentRepo.Create(ctx, apartment)
	if err != nil {
		return nil, err
	}

	return apartment, nil
}

// UpdateApartment is the resolver for the updateApartment field.
func (r *mutationResolver) UpdateApartment(ctx context.Context, input model.UpdateApartmentInput) (*entities.Apartment, error) {
	panic(fmt.Errorf("not implemented: UpdateApartment - updateApartment"))
}

// DeleteApartment is the resolver for the deleteApartment field.
func (r *mutationResolver) DeleteApartment(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteApartment - deleteApartment"))
}

// AddApartmentImage is the resolver for the addApartmentImage field.
func (r *mutationResolver) AddApartmentImage(ctx context.Context, apartmentID string, imageURL string, description *string) (*entities.ApartmentImage, error) {
	panic(fmt.Errorf("not implemented: AddApartmentImage - addApartmentImage"))
}

// RemoveApartmentImage is the resolver for the removeApartmentImage field.
func (r *mutationResolver) RemoveApartmentImage(ctx context.Context, imageID string) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveApartmentImage - removeApartmentImage"))
}

// ReorderApartmentImages is the resolver for the reorderApartmentImages field.
func (r *mutationResolver) ReorderApartmentImages(ctx context.Context, apartmentID string, imageIds []string) ([]*entities.ApartmentImage, error) {
	panic(fmt.Errorf("not implemented: ReorderApartmentImages - reorderApartmentImages"))
}

// CreateGalleryImage is the resolver for the createGalleryImage field.
func (r *mutationResolver) CreateGalleryImage(ctx context.Context, input model.CreateGalleryImageInput) (*entities.GalleryImage, error) {
	panic(fmt.Errorf("not implemented: CreateGalleryImage - createGalleryImage"))
}

// UpdateGalleryImage is the resolver for the updateGalleryImage field.
func (r *mutationResolver) UpdateGalleryImage(ctx context.Context, input model.UpdateGalleryImageInput) (*entities.GalleryImage, error) {
	panic(fmt.Errorf("not implemented: UpdateGalleryImage - updateGalleryImage"))
}

// DeleteGalleryImage is the resolver for the deleteGalleryImage field.
func (r *mutationResolver) DeleteGalleryImage(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteGalleryImage - deleteGalleryImage"))
}

// ReorderGalleryImages is the resolver for the reorderGalleryImages field.
func (r *mutationResolver) ReorderGalleryImages(ctx context.Context, route string, imageIds []string) ([]*entities.GalleryImage, error) {
	panic(fmt.Errorf("not implemented: ReorderGalleryImages - reorderGalleryImages"))
}

// CreateImagePin is the resolver for the createImagePin field.
func (r *mutationResolver) CreateImagePin(ctx context.Context, input model.CreateImagePinInput) (*entities.ImagePin, error) {
	panic(fmt.Errorf("not implemented: CreateImagePin - createImagePin"))
}

// UpdateImagePin is the resolver for the updateImagePin field.
func (r *mutationResolver) UpdateImagePin(ctx context.Context, input model.UpdateImagePinInput) (*entities.ImagePin, error) {
	panic(fmt.Errorf("not implemented: UpdateImagePin - updateImagePin"))
}

// DeleteImagePin is the resolver for the deleteImagePin field.
func (r *mutationResolver) DeleteImagePin(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteImagePin - deleteImagePin"))
}

// UpdateAppConfig is the resolver for the updateAppConfig field.
func (r *mutationResolver) UpdateAppConfig(ctx context.Context, logoURL *string, apiBaseURL *string, cacheControlMaxAge *int) (*entities.AppConfig, error) {
	panic(fmt.Errorf("not implemented: UpdateAppConfig - updateAppConfig"))
}

// Towers is the resolver for the towers field.
func (r *queryResolver) Towers(ctx context.Context) ([]*entities.Tower, error) {
	return r.TowerRepo.GetAll(ctx)
}

// Tower is the resolver for the tower field.
func (r *queryResolver) Tower(ctx context.Context, id string) (*entities.Tower, error) {
	return r.TowerRepo.GetByID(ctx, id)
}

// Floors is the resolver for the floors field.
func (r *queryResolver) Floors(ctx context.Context, towerID *string) ([]*entities.Floor, error) {
	panic(fmt.Errorf("not implemented: Floors - floors"))
}

// Floor is the resolver for the floor field.
func (r *queryResolver) Floor(ctx context.Context, id string) (*entities.Floor, error) {
	panic(fmt.Errorf("not implemented: Floor - floor"))
}

// Apartments is the resolver for the apartments field.
func (r *queryResolver) Apartments(ctx context.Context, floorID *string) ([]*entities.Apartment, error) {
	if floorID != nil {
		return r.ApartmentRepo.GetByFloorID(ctx, *floorID)
	}
	// Get all available apartments as default
	return r.ApartmentRepo.GetByStatus(ctx, entities.ApartmentStatusAvailable)
}

// Apartment is the resolver for the apartment field.
func (r *queryResolver) Apartment(ctx context.Context, id string) (*entities.Apartment, error) {
	return r.ApartmentRepo.GetByID(ctx, id)
}

// SearchApartments is the resolver for the searchApartments field.
func (r *queryResolver) SearchApartments(ctx context.Context, input model.ApartmentSearchInput) ([]*entities.Apartment, error) {
	criteria := &entities.ApartmentSearchCriteria{}

	if input.Query != nil {
		criteria.Number = input.Query
	}
	if input.Bedrooms != nil {
		criteria.Bedrooms = input.Bedrooms
	}
	if input.Suites != nil {
		criteria.Suites = input.Suites
	}
	if input.TowerID != nil {
		criteria.TowerID = input.TowerID
	}
	if input.PriceMin != nil {
		criteria.PriceMin = input.PriceMin
	}
	if input.PriceMax != nil {
		criteria.PriceMax = input.PriceMax
	}

	return r.ApartmentRepo.Search(ctx, criteria)
}

// GalleryImages is the resolver for the galleryImages field.
func (r *queryResolver) GalleryImages(ctx context.Context, route *string) ([]*entities.GalleryImage, error) {
	panic(fmt.Errorf("not implemented: GalleryImages - galleryImages"))
}

// GalleryImage is the resolver for the galleryImage field.
func (r *queryResolver) GalleryImage(ctx context.Context, id string) (*entities.GalleryImage, error) {
	panic(fmt.Errorf("not implemented: GalleryImage - galleryImage"))
}

// GalleryRoutes is the resolver for the galleryRoutes field.
func (r *queryResolver) GalleryRoutes(ctx context.Context) ([]string, error) {
	panic(fmt.Errorf("not implemented: GalleryRoutes - galleryRoutes"))
}

// ImagePins is the resolver for the imagePins field.
func (r *queryResolver) ImagePins(ctx context.Context, galleryImageID string) ([]*entities.ImagePin, error) {
	panic(fmt.Errorf("not implemented: ImagePins - imagePins"))
}

// ImagePin is the resolver for the imagePin field.
func (r *queryResolver) ImagePin(ctx context.Context, id string) (*entities.ImagePin, error) {
	panic(fmt.Errorf("not implemented: ImagePin - imagePin"))
}

// AppConfig is the resolver for the appConfig field.
func (r *queryResolver) AppConfig(ctx context.Context) (*entities.AppConfig, error) {
	panic(fmt.Errorf("not implemented: AppConfig - appConfig"))
}

// GenerateSignedUploadURL is the resolver for the generateSignedUploadUrl field.
func (r *queryResolver) GenerateSignedUploadURL(ctx context.Context, fileName string, contentType string, folder string) (*entities.SignedUploadURL, error) {
	return r.StorageService.GenerateSignedUploadURL(ctx, fileName, contentType, folder)
}

// GenerateBulkDownload is the resolver for the generateBulkDownload field.
func (r *queryResolver) GenerateBulkDownload(ctx context.Context, towerID *string) (*entities.BulkDownload, error) {
	if towerID == nil {
		return nil, fmt.Errorf("tower ID is required")
	}

	result, err := r.BulkDownloadService.GenerateTowerDownload(ctx, *towerID)
	if err != nil {
		return nil, err
	}

	return &entities.BulkDownload{
		DownloadURL: result.DownloadURL,
		FileName:    result.FileName,
		FileSize:    result.FileSize,
		ExpiresIn:   result.ExpiresIn,
		CreatedAt:   result.CreatedAt,
	}, nil
}

// Fields is the resolver for the fields field.
func (r *signedUploadUrlResolver) Fields(ctx context.Context, obj *entities.SignedUploadURL) (any, error) {
	panic(fmt.Errorf("not implemented: Fields - fields"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// SignedUploadUrl returns generated.SignedUploadUrlResolver implementation.
func (r *Resolver) SignedUploadUrl() generated.SignedUploadUrlResolver {
	return &signedUploadUrlResolver{r}
}

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type signedUploadUrlResolver struct{ *Resolver }
