// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"api/domain/entities"
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type ActionButtonInput struct {
	Label  string  `json:"label"`
	Action string  `json:"action"`
	Style  *string `json:"style,omitempty"`
}

type AddCarouselItemInput struct {
	CarouselID string                     `json:"carouselId"`
	Type       CarouselItemType           `json:"type"`
	FileID     *string                    `json:"fileId,omitempty"`
	URL        *string                    `json:"url,omitempty"`
	Caption    *string                    `json:"caption,omitempty"`
	Order      int                        `json:"order"`
	Metadata   *CarouselItemMetadataInput `json:"metadata,omitempty"`
}

type AddFloorInput struct {
	FloorPlanID       string            `json:"floorPlanId"`
	Number            string            `json:"number"`
	Name              string            `json:"name"`
	PlanImageFileID   *string           `json:"planImageFileId,omitempty"`
	ReferenceImageIds []string          `json:"referenceImageIds,omitempty"`
	Apartments        []*ApartmentInput `json:"apartments,omitempty"`
}

type AddFloorMarkerInput struct {
	FloorID     string         `json:"floorId"`
	Type        MarkerType     `json:"type"`
	Position    *PositionInput `json:"position"`
	ApartmentID *string        `json:"apartmentId,omitempty"`
	Label       *string        `json:"label,omitempty"`
	Color       *string        `json:"color,omitempty"`
	Metadata    *string        `json:"metadata,omitempty"`
}

type AddPinAnnotationInput struct {
	PinID      string         `json:"pinId"`
	Type       AnnotationType `json:"type"`
	Content    string         `json:"content"`
	Visibility *Visibility    `json:"visibility,omitempty"`
}

type AddPinInput struct {
	PinMapID    string            `json:"pinMapId"`
	Type        PinType           `json:"type"`
	Position    *PositionInput    `json:"position"`
	Label       string            `json:"label"`
	Description *string           `json:"description,omitempty"`
	Icon        *string           `json:"icon,omitempty"`
	Color       *string           `json:"color,omitempty"`
	Size        *PinSize          `json:"size,omitempty"`
	Metadata    *PinMetadataInput `json:"metadata,omitempty"`
}

type AnnotationResponse struct {
	Annotation *PinAnnotation `json:"annotation"`
}

type ApartmentAvailabilityResponse struct {
	Summary    *AvailabilitySummary `json:"summary"`
	Apartments []*FloorApartment    `json:"apartments"`
}

type ApartmentData struct {
	ID             string   `json:"id"`
	Number         string   `json:"number"`
	Floor          string   `json:"floor"`
	Status         string   `json:"status"`
	Specifications *string  `json:"specifications,omitempty"`
	Images         []string `json:"images,omitempty"`
	Videos         []string `json:"videos,omitempty"`
}

type ApartmentDataInput struct {
	ID             *string `json:"id,omitempty"`
	Number         string  `json:"number"`
	Floor          string  `json:"floor"`
	Status         string  `json:"status"`
	Specifications *string `json:"specifications,omitempty"`
}

type ApartmentInput struct {
	Number       string                  `json:"number"`
	Status       ApartmentStatusExtended `json:"status"`
	Area         *float64                `json:"area,omitempty"`
	Bedrooms     *int                    `json:"bedrooms,omitempty"`
	Bathrooms    *int                    `json:"bathrooms,omitempty"`
	Price        *float64                `json:"price,omitempty"`
	SunPosition  *SunPosition            `json:"sunPosition,omitempty"`
	Features     []string                `json:"features,omitempty"`
	CustomFields *string                 `json:"customFields,omitempty"`
}

type ApartmentSearchInput struct {
	Number        *string                   `json:"number,omitempty"`
	Suites        *int                      `json:"suites,omitempty"`
	Bedrooms      *int                      `json:"bedrooms,omitempty"`
	ParkingSpots  *int                      `json:"parkingSpots,omitempty"`
	SolarPosition *string                   `json:"solarPosition,omitempty"`
	TowerID       *string                   `json:"towerId,omitempty"`
	FloorID       *string                   `json:"floorId,omitempty"`
	PriceMin      *float64                  `json:"priceMin,omitempty"`
	PriceMax      *float64                  `json:"priceMax,omitempty"`
	AreaMin       *string                   `json:"areaMin,omitempty"`
	AreaMax       *string                   `json:"areaMax,omitempty"`
	Status        *entities.ApartmentStatus `json:"status,omitempty"`
	Available     *bool                     `json:"available,omitempty"`
	Limit         *int                      `json:"limit,omitempty"`
	Offset        *int                      `json:"offset,omitempty"`
}

type ApartmentStatusResponse struct {
	Apartment *FloorApartment `json:"apartment"`
}

type AvailabilitySummary struct {
	Total     int `json:"total"`
	Available int `json:"available"`
	Sold      int `json:"sold"`
	Reserved  int `json:"reserved"`
	Blocked   int `json:"blocked"`
}

type BusinessRules struct {
	Pricing      *string `json:"pricing,omitempty"`
	Availability *string `json:"availability,omitempty"`
	Restrictions *string `json:"restrictions,omitempty"`
	CustomFields *string `json:"customFields,omitempty"`
}

type BusinessRulesInput struct {
	Pricing      *string `json:"pricing,omitempty"`
	Availability *string `json:"availability,omitempty"`
	Restrictions *string `json:"restrictions,omitempty"`
	CustomFields *string `json:"customFields,omitempty"`
}

type CacheConfiguration struct {
	MaxFileSize        int      `json:"maxFileSize"`
	AllowedTypes       []string `json:"allowedTypes"`
	CompressionEnabled bool     `json:"compressionEnabled"`
	ThumbnailSizes     *string  `json:"thumbnailSizes,omitempty"`
	CacheExpiration    int      `json:"cacheExpiration"`
	SyncIntervals      *string  `json:"syncIntervals,omitempty"`
}

type CarouselData struct {
	ID          string              `json:"id"`
	Title       string              `json:"title"`
	Description *string             `json:"description,omitempty"`
	Items       []*CarouselItemData `json:"items,omitempty"`
}

type CarouselDataInput struct {
	ID          *string `json:"id,omitempty"`
	Title       string  `json:"title"`
	Description *string `json:"description,omitempty"`
}

type CarouselItem struct {
	ID       string           `json:"id"`
	Type     CarouselItemType `json:"type"`
	URL      string           `json:"url"`
	Order    int              `json:"order"`
	Caption  *string          `json:"caption,omitempty"`
	Metadata *string          `json:"metadata,omitempty"`
}

type CarouselItemData struct {
	ID       string  `json:"id"`
	Type     string  `json:"type"`
	URL      string  `json:"url"`
	Order    int     `json:"order"`
	Metadata *string `json:"metadata,omitempty"`
}

type CarouselItemInput struct {
	Type     CarouselItemType           `json:"type"`
	FileID   *string                    `json:"fileId,omitempty"`
	URL      *string                    `json:"url,omitempty"`
	Caption  *string                    `json:"caption,omitempty"`
	Order    int                        `json:"order"`
	Metadata *CarouselItemMetadataInput `json:"metadata,omitempty"`
}

type CarouselItemMetadataInput struct {
	Width           *int     `json:"width,omitempty"`
	Height          *int     `json:"height,omitempty"`
	ThumbnailURL    *string  `json:"thumbnailUrl,omitempty"`
	Duration        *int     `json:"duration,omitempty"`
	PosterURL       *string  `json:"posterUrl,omitempty"`
	Latitude        *float64 `json:"latitude,omitempty"`
	Longitude       *float64 `json:"longitude,omitempty"`
	Zoom            *int     `json:"zoom,omitempty"`
	MapType         *string  `json:"mapType,omitempty"`
	OverlayText     *string  `json:"overlayText,omitempty"`
	OverlayPosition *string  `json:"overlayPosition,omitempty"`
}

type CarouselItemResponse struct {
	Item *CarouselItem `json:"item"`
}

type CarouselSettings struct {
	AutoPlay         *bool   `json:"autoPlay,omitempty"`
	AutoPlayInterval *int    `json:"autoPlayInterval,omitempty"`
	ShowIndicators   *bool   `json:"showIndicators,omitempty"`
	ShowControls     *bool   `json:"showControls,omitempty"`
	EnableZoom       *bool   `json:"enableZoom,omitempty"`
	EnableFullscreen *bool   `json:"enableFullscreen,omitempty"`
	Transition       *string `json:"transition,omitempty"`
	AspectRatio      *string `json:"aspectRatio,omitempty"`
}

type CarouselSettingsInput struct {
	AutoPlay         *bool   `json:"autoPlay,omitempty"`
	AutoPlayInterval *int    `json:"autoPlayInterval,omitempty"`
	ShowIndicators   *bool   `json:"showIndicators,omitempty"`
	ShowControls     *bool   `json:"showControls,omitempty"`
	EnableZoom       *bool   `json:"enableZoom,omitempty"`
	EnableFullscreen *bool   `json:"enableFullscreen,omitempty"`
	Transition       *string `json:"transition,omitempty"`
	AspectRatio      *string `json:"aspectRatio,omitempty"`
}

type ChangePasswordInput struct {
	UserID      *string `json:"userId,omitempty"`
	OldPassword *string `json:"oldPassword,omitempty"`
	NewPassword string  `json:"newPassword"`
}

type ConfirmFileUploadInput struct {
	FileID           string            `json:"fileId"`
	MinioPath        string            `json:"minioPath"`
	RouteID          string            `json:"routeId"`
	OriginalFileName string            `json:"originalFileName"`
	FileSize         int               `json:"fileSize"`
	Checksum         string            `json:"checksum"`
	Context          *FileContextInput `json:"context"`
}

type ConfirmFileUploadResponse struct {
	Success      bool                  `json:"success"`
	FileMetadata *FileMetadataExtended `json:"fileMetadata,omitempty"`
}

type ConflictData struct {
	Field       string  `json:"field"`
	ServerValue *string `json:"serverValue,omitempty"`
	ClientValue *string `json:"clientValue,omitempty"`
	Resolution  *string `json:"resolution,omitempty"`
}

type CoordinatesInput struct {
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

type CreateApartmentInput struct {
	Number        string                    `json:"number"`
	FloorID       string                    `json:"floorId"`
	Area          *string                   `json:"area,omitempty"`
	Suites        *int                      `json:"suites,omitempty"`
	Bedrooms      *int                      `json:"bedrooms,omitempty"`
	ParkingSpots  *int                      `json:"parkingSpots,omitempty"`
	Status        *entities.ApartmentStatus `json:"status,omitempty"`
	SolarPosition *string                   `json:"solarPosition,omitempty"`
	Price         *float64                  `json:"price,omitempty"`
	Available     *bool                     `json:"available,omitempty"`
}

type CreateFloorInput struct {
	Number  string `json:"number"`
	TowerID string `json:"towerId"`
}

type CreateFloorPlanInput struct {
	Title       string        `json:"title"`
	Route       string        `json:"route"`
	FloorNumber *string       `json:"floorNumber,omitempty"`
	Description *string       `json:"description,omitempty"`
	Floors      []*FloorInput `json:"floors,omitempty"`
}

type CreateGalleryImageInput struct {
	Route        string  `json:"route"`
	Title        *string `json:"title,omitempty"`
	Description  *string `json:"description,omitempty"`
	DisplayOrder *int    `json:"displayOrder,omitempty"`
}

type CreateImageCarouselInput struct {
	Title       string                 `json:"title"`
	Route       string                 `json:"route"`
	Description *string                `json:"description,omitempty"`
	Items       []*CarouselItemInput   `json:"items,omitempty"`
	Settings    *CarouselSettingsInput `json:"settings,omitempty"`
}

type CreateImagePinInput struct {
	GalleryImageID string  `json:"galleryImageId"`
	XCoord         float64 `json:"xCoord"`
	YCoord         float64 `json:"yCoord"`
	Title          *string `json:"title,omitempty"`
	Description    *string `json:"description,omitempty"`
	ApartmentID    *string `json:"apartmentId,omitempty"`
	LinkURL        *string `json:"linkUrl,omitempty"`
}

type CreateMenuInput struct {
	Title       string   `json:"title"`
	Type        MenuType `json:"type"`
	Route       string   `json:"route"`
	Icon        *string  `json:"icon,omitempty"`
	ParentID    *string  `json:"parentId,omitempty"`
	Order       int      `json:"order"`
	Permissions []string `json:"permissions,omitempty"`
	Metadata    *string  `json:"metadata,omitempty"`
}

type CreatePinMapInput struct {
	Title             string         `json:"title"`
	Route             string         `json:"route"`
	Description       *string        `json:"description,omitempty"`
	BackgroundImageID *string        `json:"backgroundImageId,omitempty"`
	InitialZoom       *float64       `json:"initialZoom,omitempty"`
	CenterPosition    *PositionInput `json:"centerPosition,omitempty"`
	Pins              []*PinInput    `json:"pins,omitempty"`
}

type CreateTowerInput struct {
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
}

type CreateUserInput struct {
	Username string            `json:"username"`
	Email    string            `json:"email"`
	Password string            `json:"password"`
	Role     entities.UserRole `json:"role"`
	Active   *bool             `json:"active,omitempty"`
}

type DeleteResponse struct {
	Success bool `json:"success"`
}

type FileContextInput struct {
	PinID       *string           `json:"pinId,omitempty"`
	Coordinates *CoordinatesInput `json:"coordinates,omitempty"`
	FloorID     *string           `json:"floorId,omitempty"`
	FloorNumber *string           `json:"floorNumber,omitempty"`
	IsReference *bool             `json:"isReference,omitempty"`
	CarouselID  *string           `json:"carouselId,omitempty"`
	Order       *int              `json:"order,omitempty"`
	Title       *string           `json:"title,omitempty"`
	Description *string           `json:"description,omitempty"`
	Tags        []string          `json:"tags,omitempty"`
}

type FileDownloadURL struct {
	FileID      string `json:"fileId"`
	DownloadURL string `json:"downloadUrl"`
	ExpiresAt   string `json:"expiresAt"`
}

type FileMetadataExtended struct {
	ID           string  `json:"id"`
	URL          string  `json:"url"`
	DownloadURL  *string `json:"downloadUrl,omitempty"`
	ThumbnailURL *string `json:"thumbnailUrl,omitempty"`
	Metadata     *string `json:"metadata,omitempty"`
}

type FloorApartment struct {
	ID               string                  `json:"id"`
	Number           string                  `json:"number"`
	Status           ApartmentStatusExtended `json:"status"`
	Area             *float64                `json:"area,omitempty"`
	Bedrooms         *int                    `json:"bedrooms,omitempty"`
	Bathrooms        *int                    `json:"bathrooms,omitempty"`
	Price            *float64                `json:"price,omitempty"`
	SunPosition      *SunPosition            `json:"sunPosition,omitempty"`
	Features         []string                `json:"features,omitempty"`
	LastStatusChange *string                 `json:"lastStatusChange,omitempty"`
}

type FloorData struct {
	ID      string        `json:"id"`
	Number  string        `json:"number"`
	Name    string        `json:"name"`
	PlanURL *string       `json:"planUrl,omitempty"`
	Markers []*MarkerData `json:"markers,omitempty"`
}

type FloorDataInput struct {
	ID      *string `json:"id,omitempty"`
	Number  string  `json:"number"`
	Name    string  `json:"name"`
	PlanURL *string `json:"planUrl,omitempty"`
}

type FloorInput struct {
	Number          string            `json:"number"`
	Name            string            `json:"name"`
	PlanImageFileID *string           `json:"planImageFileId,omitempty"`
	Apartments      []*ApartmentInput `json:"apartments,omitempty"`
}

type FloorMarker struct {
	ID          string     `json:"id"`
	Type        MarkerType `json:"type"`
	Position    *Position  `json:"position"`
	ApartmentID *string    `json:"apartmentId,omitempty"`
	Metadata    *string    `json:"metadata,omitempty"`
}

type FloorPlan struct {
	ID           string            `json:"id"`
	Title        string            `json:"title"`
	Route        string            `json:"route"`
	FloorNumber  *string           `json:"floorNumber,omitempty"`
	Description  *string           `json:"description,omitempty"`
	PlanImageURL *string           `json:"planImageUrl,omitempty"`
	Floors       []*FloorPlanFloor `json:"floors,omitempty"`
	Markers      []*FloorMarker    `json:"markers,omitempty"`
}

type FloorPlanFloor struct {
	ID              string            `json:"id"`
	Number          string            `json:"number"`
	Name            string            `json:"name"`
	ImageURL        *string           `json:"imageUrl,omitempty"`
	PlanImageURL    *string           `json:"planImageUrl,omitempty"`
	ReferenceImages []string          `json:"referenceImages,omitempty"`
	Markers         []*FloorMarker    `json:"markers,omitempty"`
	Apartments      []*FloorApartment `json:"apartments,omitempty"`
}

type FloorPlanResponse struct {
	FloorPlan *FloorPlan `json:"floorPlan"`
}

type FloorResponse struct {
	Floor *FloorPlanFloor `json:"floor"`
}

type FullSyncInput struct {
	RouteID          string   `json:"routeId"`
	IncludeTypes     []string `json:"includeTypes,omitempty"`
	CompressionLevel *int     `json:"compressionLevel,omitempty"`
	MaxFileSize      *int     `json:"maxFileSize,omitempty"`
}

type FullSyncResponse struct {
	ZipURL        string `json:"zipUrl"`
	ExpiresAt     string `json:"expiresAt"`
	TotalFiles    int    `json:"totalFiles"`
	EstimatedSize int    `json:"estimatedSize"`
	SyncID        string `json:"syncId"`
}

type ImageCarousel struct {
	ID          string            `json:"id"`
	Title       string            `json:"title"`
	Description *string           `json:"description,omitempty"`
	Route       string            `json:"route"`
	Items       []*CarouselItem   `json:"items"`
	Settings    *CarouselSettings `json:"settings,omitempty"`
	CreatedAt   string            `json:"createdAt"`
	UpdatedAt   string            `json:"updatedAt"`
}

type ImageCarouselResponse struct {
	Carousel *ImageCarousel `json:"carousel"`
}

type InfoWindowInput struct {
	Title    *string              `json:"title,omitempty"`
	Content  *string              `json:"content,omitempty"`
	ImageURL *string              `json:"imageUrl,omitempty"`
	Actions  []*ActionButtonInput `json:"actions,omitempty"`
}

type ItemOrderInput struct {
	ItemID string `json:"itemId"`
	Order  int    `json:"order"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type MarkerData struct {
	ID          string  `json:"id"`
	Type        string  `json:"type"`
	Coordinates *string `json:"coordinates,omitempty"`
	Data        *string `json:"data,omitempty"`
}

type MarkerResponse struct {
	Marker *FloorMarker `json:"marker"`
}

type Menu struct {
	ID          string   `json:"id"`
	Title       string   `json:"title"`
	Type        MenuType `json:"type"`
	Route       string   `json:"route"`
	Icon        *string  `json:"icon,omitempty"`
	Order       int      `json:"order"`
	IsActive    bool     `json:"isActive"`
	Permissions []string `json:"permissions,omitempty"`
	Children    []*Menu  `json:"children,omitempty"`
}

type MenuResponse struct {
	Menu *Menu `json:"menu"`
}

type MenusResponse struct {
	Menus []*Menu `json:"menus"`
}

type Mutation struct {
}

type Pin struct {
	ID          string           `json:"id"`
	Type        PinType          `json:"type"`
	Position    *Position        `json:"position"`
	Label       string           `json:"label"`
	Description *string          `json:"description,omitempty"`
	Icon        *string          `json:"icon,omitempty"`
	Color       *string          `json:"color,omitempty"`
	Size        *PinSize         `json:"size,omitempty"`
	Metadata    *string          `json:"metadata,omitempty"`
	Annotations []*PinAnnotation `json:"annotations,omitempty"`
}

type PinAnnotation struct {
	ID        string         `json:"id"`
	Type      AnnotationType `json:"type"`
	Content   string         `json:"content"`
	CreatedAt string         `json:"createdAt"`
	Author    string         `json:"author"`
}

type PinInput struct {
	Type        PinType           `json:"type"`
	Position    *PositionInput    `json:"position"`
	Label       string            `json:"label"`
	Description *string           `json:"description,omitempty"`
	Icon        *string           `json:"icon,omitempty"`
	Color       *string           `json:"color,omitempty"`
	Size        *PinSize          `json:"size,omitempty"`
	Metadata    *PinMetadataInput `json:"metadata,omitempty"`
}

type PinMap struct {
	ID                 string    `json:"id"`
	Title              string    `json:"title"`
	Route              string    `json:"route"`
	Description        *string   `json:"description,omitempty"`
	BackgroundImageURL *string   `json:"backgroundImageUrl,omitempty"`
	Zoom               *float64  `json:"zoom,omitempty"`
	CenterPosition     *Position `json:"centerPosition,omitempty"`
	Pins               []*Pin    `json:"pins"`
}

type PinMapResponse struct {
	PinMap *PinMap `json:"pinMap"`
}

type PinMetadataInput struct {
	ImageIds     []string         `json:"imageIds,omitempty"`
	VideoID      *string          `json:"videoId,omitempty"`
	Category     *string          `json:"category,omitempty"`
	Tags         []string         `json:"tags,omitempty"`
	CustomFields *string          `json:"customFields,omitempty"`
	ClickAction  *string          `json:"clickAction,omitempty"`
	Tooltip      *string          `json:"tooltip,omitempty"`
	InfoWindow   *InfoWindowInput `json:"infoWindow,omitempty"`
}

type PinResponse struct {
	Pin *Pin `json:"pin"`
}

type Position struct {
	X float64 `json:"x"`
	Y float64 `json:"y"`
}

type PositionInput struct {
	X float64 `json:"x"`
	Y float64 `json:"y"`
}

type Query struct {
}

type ReorderCarouselItemsInput struct {
	CarouselID string            `json:"carouselId"`
	ItemOrders []*ItemOrderInput `json:"itemOrders"`
}

type ReorderResponse struct {
	Success bool            `json:"success"`
	Items   []*CarouselItem `json:"items,omitempty"`
}

type RouteBusinessDataInput struct {
	RouteID       string                `json:"routeId"`
	LastModified  string                `json:"lastModified"`
	Floors        []*FloorDataInput     `json:"floors,omitempty"`
	Apartments    []*ApartmentDataInput `json:"apartments,omitempty"`
	Carousels     []*CarouselDataInput  `json:"carousels,omitempty"`
	BusinessRules *BusinessRulesInput   `json:"businessRules,omitempty"`
}

type RouteBusinessDataResponse struct {
	Route         *RouteData       `json:"route,omitempty"`
	Floors        []*FloorData     `json:"floors,omitempty"`
	Apartments    []*ApartmentData `json:"apartments,omitempty"`
	Carousels     []*CarouselData  `json:"carousels,omitempty"`
	BusinessRules *BusinessRules   `json:"businessRules,omitempty"`
}

type RouteData struct {
	ID           string  `json:"id"`
	Name         string  `json:"name"`
	Description  *string `json:"description,omitempty"`
	Settings     *string `json:"settings,omitempty"`
	LastModified string  `json:"lastModified"`
}

type SearchPinResult struct {
	ID          string    `json:"id"`
	Label       string    `json:"label"`
	Description *string   `json:"description,omitempty"`
	Position    *Position `json:"position"`
	PinMapID    string    `json:"pinMapId"`
	PinMapTitle string    `json:"pinMapTitle"`
}

type SearchPinsInput struct {
	Query    string    `json:"query"`
	PinMapID *string   `json:"pinMapId,omitempty"`
	Types    []PinType `json:"types,omitempty"`
	Tags     []string  `json:"tags,omitempty"`
	Limit    *int      `json:"limit,omitempty"`
}

type SearchPinsResponse struct {
	Pins []*SearchPinResult `json:"pins"`
}

type SignedDownloadUrlsInput struct {
	RouteID           string   `json:"routeId"`
	FileIds           []string `json:"fileIds"`
	ExpirationMinutes *int     `json:"expirationMinutes,omitempty"`
}

type SignedDownloadUrlsResponse struct {
	Urls []*FileDownloadURL `json:"urls"`
}

type SignedUploadURLInput struct {
	FileName    string            `json:"fileName"`
	FileType    string            `json:"fileType"`
	ContentType string            `json:"contentType"`
	RouteID     string            `json:"routeId"`
	Context     *FileContextInput `json:"context"`
}

type SignedUploadURLResponse struct {
	UploadURL string `json:"uploadUrl"`
	MinioPath string `json:"minioPath"`
	ExpiresAt string `json:"expiresAt"`
	FileID    string `json:"fileId"`
}

type SyncMetadataInput struct {
	RouteID         string   `json:"routeId"`
	ClientTimestamp string   `json:"clientTimestamp"`
	SyncedFiles     []string `json:"syncedFiles"`
	Version         string   `json:"version"`
}

type SyncStatusResponse struct {
	Status      SyncStatus `json:"status"`
	Progress    *float64   `json:"progress,omitempty"`
	ZipURL      *string    `json:"zipUrl,omitempty"`
	Error       *string    `json:"error,omitempty"`
	CompletedAt *string    `json:"completedAt,omitempty"`
}

type UpdateApartmentInput struct {
	ID            string                    `json:"id"`
	Number        *string                   `json:"number,omitempty"`
	Area          *string                   `json:"area,omitempty"`
	Suites        *int                      `json:"suites,omitempty"`
	Bedrooms      *int                      `json:"bedrooms,omitempty"`
	ParkingSpots  *int                      `json:"parkingSpots,omitempty"`
	Status        *entities.ApartmentStatus `json:"status,omitempty"`
	SolarPosition *string                   `json:"solarPosition,omitempty"`
	Price         *float64                  `json:"price,omitempty"`
	Available     *bool                     `json:"available,omitempty"`
}

type UpdateApartmentStatusInput struct {
	ApartmentID   string                  `json:"apartmentId"`
	Status        ApartmentStatusExtended `json:"status"`
	Reason        *string                 `json:"reason,omitempty"`
	EffectiveDate *string                 `json:"effectiveDate,omitempty"`
}

type UpdateFloorInput struct {
	ID     string  `json:"id"`
	Number *string `json:"number,omitempty"`
}

type UpdateFloorPlanInput struct {
	FloorPlanID string  `json:"floorPlanId"`
	Title       *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
}

type UpdateGalleryImageInput struct {
	ID           string  `json:"id"`
	Title        *string `json:"title,omitempty"`
	Description  *string `json:"description,omitempty"`
	DisplayOrder *int    `json:"displayOrder,omitempty"`
}

type UpdateImageCarouselInput struct {
	CarouselID  string                 `json:"carouselId"`
	Title       *string                `json:"title,omitempty"`
	Description *string                `json:"description,omitempty"`
	Settings    *CarouselSettingsInput `json:"settings,omitempty"`
}

type UpdateImagePinInput struct {
	ID          string   `json:"id"`
	XCoord      *float64 `json:"xCoord,omitempty"`
	YCoord      *float64 `json:"yCoord,omitempty"`
	Title       *string  `json:"title,omitempty"`
	Description *string  `json:"description,omitempty"`
	ApartmentID *string  `json:"apartmentId,omitempty"`
	LinkURL     *string  `json:"linkUrl,omitempty"`
}

type UpdateMenuInput struct {
	MenuID      string   `json:"menuId"`
	Title       *string  `json:"title,omitempty"`
	Route       *string  `json:"route,omitempty"`
	Icon        *string  `json:"icon,omitempty"`
	Order       *int     `json:"order,omitempty"`
	IsActive    *bool    `json:"isActive,omitempty"`
	Permissions []string `json:"permissions,omitempty"`
	Metadata    *string  `json:"metadata,omitempty"`
}

type UpdatePinInput struct {
	PinID       string            `json:"pinId"`
	Position    *PositionInput    `json:"position,omitempty"`
	Label       *string           `json:"label,omitempty"`
	Description *string           `json:"description,omitempty"`
	Icon        *string           `json:"icon,omitempty"`
	Color       *string           `json:"color,omitempty"`
	Size        *PinSize          `json:"size,omitempty"`
	Metadata    *PinMetadataInput `json:"metadata,omitempty"`
}

type UpdatePinMapInput struct {
	PinMapID          string         `json:"pinMapId"`
	Title             *string        `json:"title,omitempty"`
	Description       *string        `json:"description,omitempty"`
	BackgroundImageID *string        `json:"backgroundImageId,omitempty"`
	Zoom              *float64       `json:"zoom,omitempty"`
	CenterPosition    *PositionInput `json:"centerPosition,omitempty"`
}

type UpdateRouteBusinessDataResponse struct {
	Success      bool            `json:"success"`
	LastModified *string         `json:"lastModified,omitempty"`
	Conflicts    []*ConflictData `json:"conflicts,omitempty"`
}

type UpdateSyncMetadataResponse struct {
	Success         bool    `json:"success"`
	ServerTimestamp *string `json:"serverTimestamp,omitempty"`
}

type UpdateTowerInput struct {
	ID          string  `json:"id"`
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
}

type UpdateUserInput struct {
	ID       string             `json:"id"`
	Username *string            `json:"username,omitempty"`
	Email    *string            `json:"email,omitempty"`
	Role     *entities.UserRole `json:"role,omitempty"`
	Active   *bool              `json:"active,omitempty"`
}

type AnnotationType string

const (
	AnnotationTypeText  AnnotationType = "TEXT"
	AnnotationTypeImage AnnotationType = "IMAGE"
	AnnotationTypeVideo AnnotationType = "VIDEO"
	AnnotationTypeAudio AnnotationType = "AUDIO"
	AnnotationTypeLink  AnnotationType = "LINK"
)

var AllAnnotationType = []AnnotationType{
	AnnotationTypeText,
	AnnotationTypeImage,
	AnnotationTypeVideo,
	AnnotationTypeAudio,
	AnnotationTypeLink,
}

func (e AnnotationType) IsValid() bool {
	switch e {
	case AnnotationTypeText, AnnotationTypeImage, AnnotationTypeVideo, AnnotationTypeAudio, AnnotationTypeLink:
		return true
	}
	return false
}

func (e AnnotationType) String() string {
	return string(e)
}

func (e *AnnotationType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AnnotationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AnnotationType", str)
	}
	return nil
}

func (e AnnotationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *AnnotationType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e AnnotationType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type ApartmentStatusExtended string

const (
	ApartmentStatusExtendedAvailable        ApartmentStatusExtended = "AVAILABLE"
	ApartmentStatusExtendedSold             ApartmentStatusExtended = "SOLD"
	ApartmentStatusExtendedReserved         ApartmentStatusExtended = "RESERVED"
	ApartmentStatusExtendedBlocked          ApartmentStatusExtended = "BLOCKED"
	ApartmentStatusExtendedUnderNegotiation ApartmentStatusExtended = "UNDER_NEGOTIATION"
)

var AllApartmentStatusExtended = []ApartmentStatusExtended{
	ApartmentStatusExtendedAvailable,
	ApartmentStatusExtendedSold,
	ApartmentStatusExtendedReserved,
	ApartmentStatusExtendedBlocked,
	ApartmentStatusExtendedUnderNegotiation,
}

func (e ApartmentStatusExtended) IsValid() bool {
	switch e {
	case ApartmentStatusExtendedAvailable, ApartmentStatusExtendedSold, ApartmentStatusExtendedReserved, ApartmentStatusExtendedBlocked, ApartmentStatusExtendedUnderNegotiation:
		return true
	}
	return false
}

func (e ApartmentStatusExtended) String() string {
	return string(e)
}

func (e *ApartmentStatusExtended) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ApartmentStatusExtended(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ApartmentStatusExtended", str)
	}
	return nil
}

func (e ApartmentStatusExtended) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ApartmentStatusExtended) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ApartmentStatusExtended) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type CarouselItemType string

const (
	CarouselItemTypeImage       CarouselItemType = "IMAGE"
	CarouselItemTypeVideo       CarouselItemType = "VIDEO"
	CarouselItemTypeMap         CarouselItemType = "MAP"
	CarouselItemTypeTextOverlay CarouselItemType = "TEXT_OVERLAY"
)

var AllCarouselItemType = []CarouselItemType{
	CarouselItemTypeImage,
	CarouselItemTypeVideo,
	CarouselItemTypeMap,
	CarouselItemTypeTextOverlay,
}

func (e CarouselItemType) IsValid() bool {
	switch e {
	case CarouselItemTypeImage, CarouselItemTypeVideo, CarouselItemTypeMap, CarouselItemTypeTextOverlay:
		return true
	}
	return false
}

func (e CarouselItemType) String() string {
	return string(e)
}

func (e *CarouselItemType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CarouselItemType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CarouselItemType", str)
	}
	return nil
}

func (e CarouselItemType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *CarouselItemType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e CarouselItemType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type MarkerType string

const (
	MarkerTypeApartment     MarkerType = "APARTMENT"
	MarkerTypeElevator      MarkerType = "ELEVATOR"
	MarkerTypeStairs        MarkerType = "STAIRS"
	MarkerTypeEmergencyExit MarkerType = "EMERGENCY_EXIT"
	MarkerTypeBathroom      MarkerType = "BATHROOM"
	MarkerTypeUtility       MarkerType = "UTILITY"
	MarkerTypeCustom        MarkerType = "CUSTOM"
)

var AllMarkerType = []MarkerType{
	MarkerTypeApartment,
	MarkerTypeElevator,
	MarkerTypeStairs,
	MarkerTypeEmergencyExit,
	MarkerTypeBathroom,
	MarkerTypeUtility,
	MarkerTypeCustom,
}

func (e MarkerType) IsValid() bool {
	switch e {
	case MarkerTypeApartment, MarkerTypeElevator, MarkerTypeStairs, MarkerTypeEmergencyExit, MarkerTypeBathroom, MarkerTypeUtility, MarkerTypeCustom:
		return true
	}
	return false
}

func (e MarkerType) String() string {
	return string(e)
}

func (e *MarkerType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarkerType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarkerType", str)
	}
	return nil
}

func (e MarkerType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *MarkerType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e MarkerType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type MenuType string

const (
	MenuTypeMain    MenuType = "MAIN"
	MenuTypeSub     MenuType = "SUB"
	MenuTypeAction  MenuType = "ACTION"
	MenuTypeDivider MenuType = "DIVIDER"
)

var AllMenuType = []MenuType{
	MenuTypeMain,
	MenuTypeSub,
	MenuTypeAction,
	MenuTypeDivider,
}

func (e MenuType) IsValid() bool {
	switch e {
	case MenuTypeMain, MenuTypeSub, MenuTypeAction, MenuTypeDivider:
		return true
	}
	return false
}

func (e MenuType) String() string {
	return string(e)
}

func (e *MenuType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MenuType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MenuType", str)
	}
	return nil
}

func (e MenuType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *MenuType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e MenuType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PinSize string

const (
	PinSizeSmall      PinSize = "SMALL"
	PinSizeMedium     PinSize = "MEDIUM"
	PinSizeLarge      PinSize = "LARGE"
	PinSizeExtraLarge PinSize = "EXTRA_LARGE"
)

var AllPinSize = []PinSize{
	PinSizeSmall,
	PinSizeMedium,
	PinSizeLarge,
	PinSizeExtraLarge,
}

func (e PinSize) IsValid() bool {
	switch e {
	case PinSizeSmall, PinSizeMedium, PinSizeLarge, PinSizeExtraLarge:
		return true
	}
	return false
}

func (e PinSize) String() string {
	return string(e)
}

func (e *PinSize) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PinSize(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PinSize", str)
	}
	return nil
}

func (e PinSize) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PinSize) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PinSize) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PinType string

const (
	PinTypeLocation  PinType = "LOCATION"
	PinTypeInfo      PinType = "INFO"
	PinTypeWarning   PinType = "WARNING"
	PinTypeHighlight PinType = "HIGHLIGHT"
	PinTypeCustom    PinType = "CUSTOM"
)

var AllPinType = []PinType{
	PinTypeLocation,
	PinTypeInfo,
	PinTypeWarning,
	PinTypeHighlight,
	PinTypeCustom,
}

func (e PinType) IsValid() bool {
	switch e {
	case PinTypeLocation, PinTypeInfo, PinTypeWarning, PinTypeHighlight, PinTypeCustom:
		return true
	}
	return false
}

func (e PinType) String() string {
	return string(e)
}

func (e *PinType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PinType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PinType", str)
	}
	return nil
}

func (e PinType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PinType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PinType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type SunPosition string

const (
	SunPositionNorth     SunPosition = "NORTH"
	SunPositionSouth     SunPosition = "SOUTH"
	SunPositionEast      SunPosition = "EAST"
	SunPositionWest      SunPosition = "WEST"
	SunPositionNortheast SunPosition = "NORTHEAST"
	SunPositionNorthwest SunPosition = "NORTHWEST"
	SunPositionSoutheast SunPosition = "SOUTHEAST"
	SunPositionSouthwest SunPosition = "SOUTHWEST"
	SunPositionAllDay    SunPosition = "ALL_DAY"
)

var AllSunPosition = []SunPosition{
	SunPositionNorth,
	SunPositionSouth,
	SunPositionEast,
	SunPositionWest,
	SunPositionNortheast,
	SunPositionNorthwest,
	SunPositionSoutheast,
	SunPositionSouthwest,
	SunPositionAllDay,
}

func (e SunPosition) IsValid() bool {
	switch e {
	case SunPositionNorth, SunPositionSouth, SunPositionEast, SunPositionWest, SunPositionNortheast, SunPositionNorthwest, SunPositionSoutheast, SunPositionSouthwest, SunPositionAllDay:
		return true
	}
	return false
}

func (e SunPosition) String() string {
	return string(e)
}

func (e *SunPosition) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SunPosition(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SunPosition", str)
	}
	return nil
}

func (e SunPosition) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SunPosition) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SunPosition) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type SyncStatus string

const (
	SyncStatusPending    SyncStatus = "PENDING"
	SyncStatusInProgress SyncStatus = "IN_PROGRESS"
	SyncStatusCompleted  SyncStatus = "COMPLETED"
	SyncStatusFailed     SyncStatus = "FAILED"
	SyncStatusExpired    SyncStatus = "EXPIRED"
)

var AllSyncStatus = []SyncStatus{
	SyncStatusPending,
	SyncStatusInProgress,
	SyncStatusCompleted,
	SyncStatusFailed,
	SyncStatusExpired,
}

func (e SyncStatus) IsValid() bool {
	switch e {
	case SyncStatusPending, SyncStatusInProgress, SyncStatusCompleted, SyncStatusFailed, SyncStatusExpired:
		return true
	}
	return false
}

func (e SyncStatus) String() string {
	return string(e)
}

func (e *SyncStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SyncStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SyncStatus", str)
	}
	return nil
}

func (e SyncStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SyncStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SyncStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type Visibility string

const (
	VisibilityPublic     Visibility = "PUBLIC"
	VisibilityPrivate    Visibility = "PRIVATE"
	VisibilityTeam       Visibility = "TEAM"
	VisibilityRestricted Visibility = "RESTRICTED"
)

var AllVisibility = []Visibility{
	VisibilityPublic,
	VisibilityPrivate,
	VisibilityTeam,
	VisibilityRestricted,
}

func (e Visibility) IsValid() bool {
	switch e {
	case VisibilityPublic, VisibilityPrivate, VisibilityTeam, VisibilityRestricted:
		return true
	}
	return false
}

func (e Visibility) String() string {
	return string(e)
}

func (e *Visibility) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Visibility(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Visibility", str)
	}
	return nil
}

func (e Visibility) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Visibility) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Visibility) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
