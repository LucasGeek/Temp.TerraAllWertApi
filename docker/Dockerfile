# =============================================================================
# DOCKERFILE MULTI-STAGE PARA TERRA ALLWERT API
# =============================================================================
# Arquivo: docker/Dockerfile
# Prop√≥sito: Build multi-stage para diferentes ambientes (dev, stg, prd)
# 
# TARGETS DISPON√çVEIS:
# - dev: Ambiente de desenvolvimento com ferramentas de debug
# - stg: Ambiente de staging com configura√ß√µes intermedi√°rias
# - prd: Ambiente de produ√ß√£o otimizado e seguro
# - default: Aponta para produ√ß√£o (prd)
# 
# USO:
# docker build --target dev -t terra_allwert/api:dev .
# docker build --target stg -t terra_allwert/api:stg .
# docker build --target prd -t terra_allwert/api:latest .
# =============================================================================

# =============================================================================
# BASE STAGE - DEPEND√äNCIAS E CONFIGURA√á√ïES COMUNS
# =============================================================================
FROM golang:1.24-alpine AS base

# -----------------------------------------------------------------------------
# METADADOS E LABELS
# -----------------------------------------------------------------------------
LABEL maintainer="Terra Allwert Team <dev@terra_allwert.com>"
LABEL description="Terra Allwert API - Sistema de cota√ß√µes de moedas"
LABEL version="1.0.0"

# -----------------------------------------------------------------------------
# INSTALA√á√ÉO DE DEPEND√äNCIAS DO SISTEMA
# -----------------------------------------------------------------------------
# Instalar pacotes essenciais para build e runtime
RUN apk add --no-cache \
    git \
    ca-certificates \
    tzdata \
    curl \
    make \
    bash

# -----------------------------------------------------------------------------
# CONFIGURA√á√ÉO DO AMBIENTE GO
# -----------------------------------------------------------------------------
# Definir diret√≥rio de trabalho dentro do container
WORKDIR /app

# Configurar vari√°veis de ambiente Go para otimiza√ß√£o
ENV CGO_ENABLED=0
ENV GOOS=linux
ENV GOARCH=amd64

# -----------------------------------------------------------------------------
# GERENCIAMENTO DE DEPEND√äNCIAS GO
# -----------------------------------------------------------------------------
# Copiar arquivos de depend√™ncias primeiro (camada de cache otimizada)
# ‚úÖ CORRIGIDO: Os arquivos est√£o em src/, n√£o na raiz
COPY src/go.mod src/go.sum ./

# Download e verifica√ß√£o de depend√™ncias (apenas se go.mod existir)
# Esta camada ser√° cachada se go.mod/go.sum n√£o mudarem
RUN if [ -f go.mod ]; then \
        echo "üì¶ Baixando depend√™ncias Go..." && \
        go mod download && \
        go mod verify; \
    else \
        echo "‚ö†Ô∏è  go.mod n√£o encontrado, pulando download de depend√™ncias"; \
    fi

# -----------------------------------------------------------------------------
# C√ìPIA DO C√ìDIGO FONTE
# -----------------------------------------------------------------------------
# Copiar todo o c√≥digo fonte (depois das depend√™ncias para cache otimizado)
# ‚úÖ CORRIGIDO: Copiar apenas o diret√≥rio src para o container
COPY src/ ./

# Verificar estrutura do projeto e arquivos copiados
RUN echo "üìÅ Estrutura do projeto ap√≥s c√≥pia:" && \
    ls -la && \
    echo "üìÅ Verificando arquivos Go:" && \
    find . -name "*.go" -type f | head -10 && \
    echo "üìÅ Verificando conte√∫do completo:" && \
    find . -type f | head -20 && \
    if [ -f "main.go" ]; then \
        echo "‚úÖ Arquivo main.go encontrado"; \
    else \
        echo "‚ö†Ô∏è  Arquivo main.go n√£o encontrado"; \
        echo "üìÅ Listando todos os arquivos:"; \
        find . -type f; \
    fi

# =============================================================================
# DEVELOPMENT TARGET - AMBIENTE DE DESENVOLVIMENTO
# =============================================================================
FROM base AS dev

# -----------------------------------------------------------------------------
# LABELS ESPEC√çFICOS DE DESENVOLVIMENTO
# -----------------------------------------------------------------------------
LABEL environment="development"
LABEL debug="enabled"
LABEL hot_reload="enabled"

# -----------------------------------------------------------------------------
# FERRAMENTAS DE DESENVOLVIMENTO
# -----------------------------------------------------------------------------
# Instalar Delve (debugger Go)
RUN echo "üîß Instalando ferramentas de desenvolvimento..." && \
    go install github.com/go-delve/delve/cmd/dlv@latest

# Instalar Air para hot reload (opcional)
RUN go install github.com/air-verse/air@latest

# Instalar ferramentas de lint e formata√ß√£o
RUN go install golang.org/x/tools/cmd/goimports@latest && \
    go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

# -----------------------------------------------------------------------------
# CONFIGURA√á√ÉO DE USU√ÅRIO DE DESENVOLVIMENTO
# -----------------------------------------------------------------------------
# Criar grupo de desenvolvimento com ID espec√≠fico
RUN addgroup -g 1001 -S devgroup

# Criar usu√°rio de desenvolvimento n√£o-root
RUN adduser -u 1001 -S devuser -G devgroup -s /bin/bash

# -----------------------------------------------------------------------------
# CONFIGURA√á√ÉO DE PERMISS√ïES PARA DESENVOLVIMENTO
# -----------------------------------------------------------------------------
# Configurar permiss√µes do diret√≥rio de trabalho
RUN chown -R devuser:devgroup /app && \
    chmod -R 755 /app

# Criar diret√≥rio para cache do Go
RUN mkdir -p /home/devuser/.cache/go-build && \
    chown -R devuser:devgroup /home/devuser/.cache

# -----------------------------------------------------------------------------
# CONFIGURA√á√ÉO DE USU√ÅRIO
# -----------------------------------------------------------------------------
# Mudar para usu√°rio n√£o-root (seguran√ßa)
USER devuser

# -----------------------------------------------------------------------------
# CONFIGURA√á√ÉO DE PORTAS PARA DESENVOLVIMENTO
# -----------------------------------------------------------------------------
# Expor porta da aplica√ß√£o
EXPOSE 8080

# Expor porta do debugger Delve
EXPOSE 2345

# Expor porta do pprof (profiling)
EXPOSE 6060

# -----------------------------------------------------------------------------
# PONTO DE ENTRADA PARA DESENVOLVIMENTO
# -----------------------------------------------------------------------------
# Comando padr√£o para desenvolvimento (pode ser sobrescrito)
CMD ["sh", "-c", "echo 'üöÄ Modo desenvolvimento iniciado' && go run ."]

# =============================================================================
# BUILD STAGE - COMPILA√á√ÉO OTIMIZADA PARA PRODU√á√ÉO
# =============================================================================
FROM base AS builder

# -----------------------------------------------------------------------------
# LABELS ESPEC√çFICOS DE BUILD
# -----------------------------------------------------------------------------
LABEL stage="builder"
LABEL purpose="compile_optimized_binary"

# -----------------------------------------------------------------------------
# CONFIGURA√á√ÉO DE BUILD OTIMIZADO
# -----------------------------------------------------------------------------
# Definir vari√°veis de build
ARG BUILD_TIME
ARG GIT_COMMIT
ARG VERSION=1.0.0

# Adiciona utilit√°rio `file` temporariamente para diagn√≥stico do bin√°rio
RUN apk add --no-cache file

# Exibir informa√ß√µes de build
RUN echo "üî® Iniciando build otimizado..." && \
    echo "üìÖ Build time: ${BUILD_TIME}" && \
    echo "üîó Git commit: ${GIT_COMMIT}" && \
    echo "üè∑Ô∏è  Version: ${VERSION}"

# -----------------------------------------------------------------------------
# COMPILA√á√ÉO OTIMIZADA
# -----------------------------------------------------------------------------
# Compilar aplica√ß√£o diretamente (c√≥digo j√° est√° em /app)
RUN echo "‚öôÔ∏è  Compilando aplica√ß√£o Terra Allwert..." && \
    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags="-w -s -extldflags '-static' \
              -X main.BuildTime=${BUILD_TIME} \
              -X main.GitCommit=${GIT_COMMIT} \
              -X main.Version=${VERSION}" \
    -a -installsuffix cgo \
    -o /app/terra_allwert-api \
    . && \
    echo "‚úÖ Compila√ß√£o conclu√≠da com sucesso"

# Verificar se o bin√°rio foi criado corretamente
RUN ls -la /app/terra_allwert-api && \
    file /app/terra_allwert-api && \
    echo "üì¶ Tamanho do bin√°rio: $(du -h /app/terra_allwert-api | cut -f1)"

# =============================================================================
# STAGING TARGET - AMBIENTE DE HOMOLOGA√á√ÉO
# =============================================================================
FROM alpine:3.18 AS stg

# -----------------------------------------------------------------------------
# LABELS ESPEC√çFICOS DE STAGING
# -----------------------------------------------------------------------------
LABEL environment="staging"
LABEL version="1.0.0"
LABEL purpose="testing_and_validation"

# -----------------------------------------------------------------------------
# INSTALA√á√ÉO DE DEPEND√äNCIAS PARA STAGING
# -----------------------------------------------------------------------------
# Instalar depend√™ncias necess√°rias para staging (inclui ferramentas de debug)
RUN apk --no-cache add \
    ca-certificates \
    tzdata \
    curl \
    bash \
    jq \
    netcat-openbsd \
    htop \
    && rm -rf /var/cache/apk/

# -----------------------------------------------------------------------------
# CONFIGURA√á√ÉO DE USU√ÅRIO N√ÉO-ROOT
# -----------------------------------------------------------------------------
# Criar grupo da aplica√ß√£o
RUN addgroup -g 1001 -S appgroup

# Criar usu√°rio da aplica√ß√£o n√£o-root
RUN adduser -u 1001 -S appuser -G appgroup -s /bin/bash

# -----------------------------------------------------------------------------
# CONFIGURA√á√ÉO DO AMBIENTE DE STAGING
# -----------------------------------------------------------------------------
# Configurar diret√≥rio de trabalho
WORKDIR /app

# Copiar bin√°rio compilado do stage builder
COPY --from=builder /app/terra_allwert-api .

# Verificar se o bin√°rio foi copiado corretamente
RUN ls -la /app/terra_allwert-api && \
    echo "‚úÖ Bin√°rio copiado para staging"

# -----------------------------------------------------------------------------
# CONFIGURA√á√ÉO DE DIRET√ìRIOS E PERMISS√ïES
# -----------------------------------------------------------------------------
# Criar diret√≥rios necess√°rios para aplica√ß√£o
RUN mkdir -p /app/logs /app/config /app/tmp && \
    chown -R appuser:appgroup /app && \
    chmod 755 /app && \
    chmod +x /app/terra_allwert-api

# -----------------------------------------------------------------------------
# CONFIGURA√á√ÉO DE TIMEZONE
# -----------------------------------------------------------------------------
# Configurar timezone para Brasil
RUN ln -sf /usr/share/zoneinfo/America/Campo_Grande /etc/localtime && \
    echo "America/Campo_Grande" > /etc/timezone

# -----------------------------------------------------------------------------
# CONFIGURA√á√ÉO DE USU√ÅRIO
# -----------------------------------------------------------------------------
# Mudar para usu√°rio n√£o-root
USER appuser

# -----------------------------------------------------------------------------
# CONFIGURA√á√ÉO DE PORTA
# -----------------------------------------------------------------------------
# Expor porta da aplica√ß√£o
EXPOSE 8080

# -----------------------------------------------------------------------------
# HEALTH CHECK PARA STAGING
# -----------------------------------------------------------------------------
# Health check otimizado para staging (mais tolerante)
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# -----------------------------------------------------------------------------
# COMANDO PADR√ÉO PARA STAGING
# -----------------------------------------------------------------------------
CMD ["./terra_allwert-api"]

# =============================================================================
# PRODUCTION TARGET - AMBIENTE DE PRODU√á√ÉO
# =============================================================================
FROM alpine:3.18 AS prd

# -----------------------------------------------------------------------------
# LABELS ESPEC√çFICOS DE PRODU√á√ÉO
# -----------------------------------------------------------------------------
LABEL environment="production"
LABEL version="1.0.0"
LABEL maintainer="Terra Allwert Team <prod@terra_allwert.com>"
LABEL security="hardened"
LABEL optimization="maximum"

# -----------------------------------------------------------------------------
# INSTALA√á√ÉO M√çNIMA PARA PRODU√á√ÉO
# -----------------------------------------------------------------------------
# Instalar apenas depend√™ncias essenciais (m√≠nimas para seguran√ßa)
RUN apk --no-cache add \
    ca-certificates \
    tzdata
    # ‚úÖ NOTA: Removidas ferramentas de debug para produ√ß√£o

# Limpar cache completamente
RUN rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

# -----------------------------------------------------------------------------
# CONFIGURA√á√ÉO DE USU√ÅRIO N√ÉO-ROOT (PRODU√á√ÉO)
# -----------------------------------------------------------------------------
# Criar grupo da aplica√ß√£o com ID espec√≠fico
RUN addgroup -g 1001 -S appgroup

# Criar usu√°rio da aplica√ß√£o n√£o-root (sem shell para seguran√ßa)
RUN adduser -u 1001 -S appuser -G appgroup -D -s /sbin/nologin

# -----------------------------------------------------------------------------
# CONFIGURA√á√ÉO DO AMBIENTE DE PRODU√á√ÉO
# -----------------------------------------------------------------------------
# Configurar diret√≥rio de trabalho
WORKDIR /app

# Copiar bin√°rio compilado do stage builder
COPY --from=builder /app/terra_allwert-api .

# -----------------------------------------------------------------------------
# CONFIGURA√á√ÉO DE SEGURAN√áA M√ÅXIMA
# -----------------------------------------------------------------------------
# Criar apenas diret√≥rio de logs (m√≠nimo necess√°rio)
RUN mkdir -p /app/logs && \
    chown -R appuser:appgroup /app && \
    chmod 755 /app && \
    chmod 555 /app/terra_allwert-api  # ‚úÖ Permiss√£o restritiva (apenas execu√ß√£o)

# Remover permiss√µes desnecess√°rias
RUN chmod -R o-rwx /app

# -----------------------------------------------------------------------------
# CONFIGURA√á√ÉO DE TIMEZONE PARA PRODU√á√ÉO
# -----------------------------------------------------------------------------
# Configurar timezone para Brasil
RUN ln -sf /usr/share/zoneinfo/America/Campo_Grande /etc/localtime && \
    echo "America/Campo_Grande" > /etc/timezone

# -----------------------------------------------------------------------------
# CONFIGURA√á√ÉO DE USU√ÅRIO
# -----------------------------------------------------------------------------
# Mudar para usu√°rio n√£o-root (seguran√ßa cr√≠tica)
USER appuser

# -----------------------------------------------------------------------------
# CONFIGURA√á√ÉO DE PORTA (PRODU√á√ÉO)
# -----------------------------------------------------------------------------
# Expor apenas porta necess√°ria
EXPOSE 8080

# -----------------------------------------------------------------------------
# HEALTH CHECK OTIMIZADO PARA PRODU√á√ÉO
# -----------------------------------------------------------------------------
# Health check com wget (mais leve que curl) e configura√ß√µes otimizadas
HEALTHCHECK --interval=60s --timeout=5s --start-period=60s --retries=2 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# -----------------------------------------------------------------------------
# COMANDO FINAL PARA PRODU√á√ÉO
# -----------------------------------------------------------------------------
CMD ["./terra_allwert-api"]

# =============================================================================
# DEFAULT TARGET - PADR√ÉO APONTA PARA PRODU√á√ÉO
# =============================================================================
FROM prd AS default

# Este target √© usado quando nenhum target espec√≠fico √© especificado
# Por seguran√ßa, o padr√£o √© sempre produ√ß√£o